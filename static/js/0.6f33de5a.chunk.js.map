{"version":3,"sources":["tonva-react/auth/register/VStart.tsx","tonva-react/auth/register/VVerify.tsx","tonva-react/auth/register/VPassword.tsx","tonva-react/auth/register/VSuccess.tsx","tonva-react/auth/register/CRegister.ts"],"names":["VStart","schema","name","type","required","maxLength","uiSchema","onSubmit","context","a","clearContextErrors","user","value","getValue","undefined","sender","getSender","setError","length","controller","account","checkAccount","ret","onEnter","this","items","widget","label","accountLable","placeholder","verify","className","pageCaption","style","marginLeft","marginRight","tonvaTop","onButtonClick","requiredFlag","href","nav","privacyEntry","VPage","VRegisterStart","VForgetStart","VVerify","onVerifyChanged","prev","setDisabled","onChanged","submit","disabled","onVerify","typeText","extra","VPassword","onButtonSubmit","values","form","data","pwd","rePwd","setValue","error","onPasswordSubmit","push","header","submitCaption","VRegisterPassword","VForgetPassword","VSuccess","VRegisterSuccess","login","onClick","VForgetSuccess","CRegBase","password","userApi","guest","retUser","alert","userLogined","isWebNav","navigate","openVPage","checkVerify","toPassword","isExists","accountError","sendVerify","oem","toVerify","Controller","CRegister","params","nick","country","mobile","mobileCountry","email","Number","register","clear","toSuccess","regReturn","registerReturn","msg","CForget","resetPassword","err","console","log"],"mappings":"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","file":"static/js/0.6f33de5a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { VPage } from \"../../vm\";\r\nimport { tonvaTop, getSender } from '../tools';\r\nimport {nav, Schema, UiSchema, UiTextItem, UiButton, Form, Context, StringSchema, Ax} from '../../components';\r\nimport { CForget, CRegBase, CRegister } from './CRegister';\r\n\r\nexport abstract class VStart<T extends CRegBase> extends VPage<T> {\r\n    private schema: Schema = [\r\n        {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'verify', type: 'submit'},\r\n    ]\r\n\tprivate uiSchema: UiSchema;\r\n\t\r\n\tabstract get accountLable():string;\r\n\tabstract get pageCaption():string;\r\n\r\n\tinit() {\r\n        this.uiSchema = {\r\n            items: {\r\n                user: {\r\n                    widget: 'text',\r\n                    label: this.accountLable,\r\n                    placeholder: '手机号或邮箱',\r\n                } as UiTextItem, \r\n                verify: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '发送验证码'} as UiButton,\r\n            }\r\n        }\r\n\t}\r\n\r\n\theader() {return this.pageCaption;}\r\n\r\n    content():JSX.Element {\r\n        return <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n\t\t\t{tonvaTop()}\r\n\t\t\t<div className=\"h-3c\" />\r\n\t\t\t<Form schema={this.schema} uiSchema={this.uiSchema} \r\n\t\t\t\tonButtonClick={this.onSubmit}\r\n\t\t\t\tonEnter={this.onEnter} \r\n\t\t\t\trequiredFlag={false} />\r\n\t\t\t<div className=\"text-center py-3\">\r\n\t\t\t\t<Ax href=\"/login\" className=\"text-primary\">已有账号，直接登录</Ax>\r\n\t\t\t</div>\r\n\t\t\t{nav.privacyEntry()}\r\n\t\t</div>;\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        context.clearContextErrors();\r\n        let user = 'user';\r\n        let value = context.getValue(user);\r\n        let sender = getSender(value);\r\n        if (sender === undefined) {\r\n            context.setError(user, '必须是手机号或邮箱');\r\n            return;\r\n        }\r\n        let type:'mobile'|'email' = sender.type as 'mobile'|'email';\r\n        if (type === 'mobile') {\r\n            if (value.length !== 11 || value[0] !== '1') {\r\n                context.setError(user, '请输入正确的手机号');\r\n                return;\r\n            }\r\n        }\r\n        this.controller.account = value;\r\n        this.controller.type = type;\r\n        let ret = await this.controller.checkAccount();\r\n        if (ret !== undefined) context.setError(user, ret);\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'user') {\r\n            return await this.onSubmit('verify', context);\r\n        }\r\n    }\r\n}\r\n\r\nexport class VRegisterStart extends VStart<CRegister> {\r\n\tget accountLable():string {return '账号'}\r\n\tget pageCaption():string {return '注册账号'}\r\n}\r\n\r\nexport class VForgetStart extends VStart<CForget> {\r\n\tfooter():JSX.Element {return null;}\r\n\tget accountLable():string {return '账号'}\r\n\tget pageCaption():string {return '密码找回'}\r\n}\r\n","import React from 'react';\r\nimport { VPage } from \"../../vm\";\r\nimport { CRegBase } from \"./CRegister\";\r\nimport {Schema, UiSchema, UiTextItem, UiButton, Form, Context, NumSchema} from '../../components';\r\n\r\nexport class VVerify extends VPage<CRegBase> {\r\n    private schema: Schema = [\r\n        {name: 'verify', type: 'number', required: true, maxLength: 6} as NumSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n\r\n    private onVerifyChanged = (context:Context, value:any, prev:any) => {\r\n        context.setDisabled('submit', !value || (value.length !== 6));\r\n    }\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            verify: {\r\n                widget: 'text',\r\n                label: '验证码',\r\n                placeholder: '请输入验证码',\r\n                onChanged: this.onVerifyChanged,\r\n            } as UiTextItem, \r\n            submit: {\r\n                widget: 'button', \r\n                className: 'btn btn-primary btn-block mt-3', \r\n                label: '下一步 >',\r\n                disabled: true\r\n            } as UiButton,\r\n        }\r\n\t}\r\n\t\r\n\tprivate onVerify: (verify:string) => Promise<number>;\r\n\tinit(onVerify: (verify:string) => Promise<number>) {\r\n\t\tthis.onVerify = onVerify;\r\n\t}\r\n\r\n\tprivate onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let verify = context.getValue('verify');\r\n        let ret = await this.onVerify(verify);\r\n        if (ret === 0) {\r\n            context.setError('verify', '验证码错误');\r\n            return;\r\n        }\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'verify') {\r\n            return await this.onSubmit('submit', context);\r\n        }\r\n    }\r\n\r\n\theader() {return '验证码'}\r\n\r\n\tcontent() {\r\n        let typeText:string, extra:any;\r\n        switch (this.controller.type) {\r\n            case 'mobile': typeText = '手机号'; break;\r\n            case 'email': \r\n                typeText = '邮箱'; \r\n                extra = <><span className=\"text-danger\">注意</span>: 有可能误为垃圾邮件，请检查<br/></>;\r\n                break;\r\n        }\r\n        return <div className=\"w-max-20c my-5 py-5\"\r\n\t\t\tstyle={{marginLeft:'auto', marginRight:'auto'}}>\r\n\t\t\t验证码已经发送到{typeText}<br/>\r\n\t\t\t<div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n\t\t\t{extra}\r\n\t\t\t<div className=\"h-1c\" />\r\n\t\t\t<Form schema={this.schema} uiSchema={this.uiSchema} \r\n\t\t\t\tonButtonClick={this.onSubmit} \r\n\t\t\t\tonEnter={this.onEnter}\r\n\t\t\t\trequiredFlag={false} />\r\n\t\t</div>;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { VPage } from \"../../vm\";\r\nimport {nav, Page, Schema, UiSchema, UiPasswordItem, UiButton, Form, Context, StringSchema} from '../../components';\r\nimport { CForget, CRegBase, CRegister } from './CRegister';\r\n\r\nexport abstract class VPassword<T extends CRegBase> extends VPage<T> {\r\n\tprotected abstract get pageCaption():string;\r\n\tprotected abstract get submitCaption():string;\r\n\r\n\tget account():string {return this.controller.account}\r\n\r\n    private schema: Schema = [\r\n        {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n\r\n\tprivate onButtonSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let {pwd, rePwd} = values;\r\n        let error:string;\r\n        if (!pwd || pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            error = '密码错误，请重新输入密码！';\r\n            context.setError('pwd', error);\r\n        }\r\n        else {\r\n\t\t\terror = await this.controller.onPasswordSubmit(pwd);\r\n            if (error !== undefined) {\r\n                nav.push(<Page header=\"注册不成功\"><div className=\"p-5 text-danger\">{error}</div></Page>);\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'rePwd') {\r\n            return await this.onButtonSubmit('submit', context);\r\n        }\r\n    }\r\n\t\r\n\theader() {\r\n\t\treturn this.pageCaption;\r\n\t}\r\n\r\n\tcontent() {\r\n\t\tlet uiSchema: UiSchema = {\r\n\t\t\titems: {\r\n\t\t\t\tpwd: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n\t\t\t\trePwd: {widget: 'password', placeholder: '重复密码', label: '重复密码'} as UiPasswordItem,\r\n\t\t\t\tsubmit: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: this.submitCaption} as UiButton,\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn <div className=\"w-max-20c my-5 py-5\"\r\n\t\t\tstyle={{marginLeft:'auto', marginRight:'auto'}}>\r\n\t\t\t注册账号<br/>\r\n\t\t\t<div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.account}</b></div>\r\n\t\t\t<div className=\"h-1c\" />\r\n\t\t\t<Form schema={this.schema} uiSchema={uiSchema}\r\n\t\t\t\tonButtonClick={this.onButtonSubmit}\r\n\t\t\t\tonEnter={this.onEnter}\r\n\t\t\t\trequiredFlag={false} />\r\n\t\t</div>;\r\n    }\r\n}\r\n\r\nexport class VRegisterPassword extends VPassword<CRegister> {\r\n\tget pageCaption():string {return '注册账号'}\r\n\tget submitCaption():string {return '注册新账号'}\r\n}\r\n\r\nexport class VForgetPassword extends VPassword<CForget> {\r\n\tget pageCaption():string {return '账号密码'}\r\n\tget submitCaption():string {return '改密码'}\r\n}\r\n","import React from 'react';\r\nimport { VPage } from \"../../vm\";\r\nimport { CRegBase } from './CRegister';\r\n\r\nexport abstract class VSuccess extends VPage<CRegBase> {\r\n\theader() {return false;}\r\n}\r\n\r\nexport class VRegisterSuccess extends VSuccess {\r\n\tcontent() {\r\n    \tconst {account, login} = this.controller;\r\n\t\treturn <div className=\"container w-max-30c\">\r\n\t\t\t<div className=\"my-5\">\r\n\t\t\t\t<div className=\"py-5 text-center\">\r\n\t\t\t\t\t账号 <strong className=\"text-primary\">{account} </strong> 注册成功！\r\n\t\t\t\t</div>\r\n\t\t\t\t<button className=\"btn btn-success btn-block\" type=\"button\" onClick={()=>login(undefined)}>\r\n\t\t\t\t\t直接登录\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>;\r\n\t}\r\n}\r\n\r\nexport class VForgetSuccess extends VSuccess {\r\n\tcontent() {\r\n    \tconst {login} = this.controller;\r\n\t\treturn <div className=\"container w-max-30c\">\r\n\t\t\t<div className=\"my-5\">\r\n\t\t\t\t<div className=\"py-5 text-center text-success\">成功修改密码</div>\r\n\t\t\t\t<button className=\"btn btn-primary btn-block\" onClick={()=>login()}>\r\n\t\t\t\t\t登录账号\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t}\t\r\n}\r\n","import { Controller, VPage } from \"../../vm\";\r\nimport { nav } from '../../components';\r\nimport { VRegisterStart, VForgetStart } from './VStart';\r\nimport { userApi, RegisterParameter } from '../../net';\r\nimport { VVerify } from './VVerify';\r\nimport { VRegisterPassword, VForgetPassword } from './VPassword';\r\nimport { VForgetSuccess, VRegisterSuccess } from \"./VSuccess\";\r\n\r\nexport abstract class CRegBase extends Controller {\r\n    account: string;\r\n    type:'mobile'|'email';\r\n    password: string;\r\n    verify: string;\r\n\r\n\tprotected abstract get VStart(): new(c:Controller) => VPage<any>;\r\n    protected async internalStart() {\r\n        this.openVPage(this.VStart);\r\n    }\r\n\r\n\tprotected get VVerify(): new(c:Controller) => VPage<any> {return VVerify as any};\r\n    toVerify() {\r\n        //this.account = account;\r\n        this.openVPage(this.VVerify, async (verify: string) => {\r\n\t\t\tthis.verify = verify;\r\n\t\t\tlet ret = await userApi.checkVerify(this.account, verify);\r\n\t\t\tif (ret === 0) return ret;\r\n\t\t\tthis.toPassword();\r\n\t\t});\r\n    }\r\n\r\n\tprotected abstract get VPassword(): new(c:Controller) => VPage<any>;\r\n    toPassword() {\r\n        this.openVPage(this.VPassword);\r\n    }\r\n\r\n\tprotected abstract get VSuccess(): new(c:Controller) => VPage<any>;\r\n    toSuccess() {\r\n        this.openVPage(this.VSuccess);\r\n\t}\r\n\r\n    login = async (account?:string) => {\r\n        let retUser = await userApi.login({user: account || this.account, pwd: this.password, guest: nav.guest});\r\n        if (retUser === undefined) {\r\n            alert('something wrong!');\r\n            return;\r\n        }\r\n\t\tawait nav.userLogined(retUser);\r\n\t\t//await nav.start();\r\n\t\tif (this.isWebNav) nav.navigate('/');\r\n    }\r\n\r\n    async checkAccount():Promise<string> {\r\n        let ret = await userApi.isExists(this.account);\r\n        let error = this.accountError(ret);\r\n        if (error !== undefined) return error;\r\n        ret = await userApi.sendVerify(this.account, this.type, nav.oem);\r\n        this.toVerify();\r\n        return;\r\n    }\r\n\r\n    protected abstract accountError(isExists: number):string;\r\n\tabstract onPasswordSubmit(pwd:string):Promise<string>;\r\n}\r\n\r\nexport class CRegister extends CRegBase {\r\n\tprotected get VStart(): new(c:Controller) => VPage<any> {return VRegisterStart as any};\r\n\tprotected get VPassword(): new(c:Controller) => VPage<any> {return VRegisterPassword as any};\r\n\tprotected get VSuccess(): new(c:Controller) => VPage<any> {return VRegisterSuccess as any}\r\n    protected accountError(isExists: number) {\r\n        if (isExists > 0) return '已经被注册使用了';\r\n    }\r\n\r\n    async onPasswordSubmit(pwd:string):Promise<string> {\r\n\t\tthis.password = pwd;\r\n        let params: RegisterParameter = {\r\n            nick: undefined,\r\n            user: this.account, \r\n            pwd,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            mobileCountry: undefined,\r\n            email: undefined,\r\n            verify: this.verify\r\n        }\r\n        switch (this.type) {\r\n            case 'mobile':\r\n                params.mobile = Number(this.account);\r\n                params.mobileCountry=86;\r\n                break;\r\n            case 'email':\r\n                params.email = this.account;\r\n                break;\r\n        }\r\n        let ret = await userApi.register(params);\r\n        if (ret === 0) {\r\n            nav.clear();\r\n            this.toSuccess();\r\n            return;\r\n        }\r\n        let error = this.regReturn(ret)\r\n        return error;\r\n\t}\r\n\t\r\n    private regReturn(registerReturn:number):string {\r\n        let msg:any;\r\n        switch (registerReturn) {\r\n            default: return '服务器发生错误';\r\n            case 4: return '验证码错误';\r\n            case 0: return;\r\n            case 1: msg = '用户名 ' + this.account; break;\r\n            case 2: msg = '手机号 +' + this.account; break;\r\n            case 3: msg = '邮箱 ' + this.account; break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n    }\r\n}\r\n\r\nexport class CForget extends CRegBase {\r\n\tprotected get VStart(): new(c:Controller) => VPage<any> {return VForgetStart as any};\r\n\tprotected get VPassword(): new(c:Controller) => VPage<any> {return VForgetPassword as any};\r\n\tprotected get VSuccess(): new(c:Controller) => VPage<any> {return VForgetSuccess as any}\r\n\tprotected accountError(isExists: number) {\r\n        if (isExists === 0) return '请输入正确的账号';\r\n    }\r\n    async onPasswordSubmit(pwd:string):Promise<string> {\r\n\t\tthis.password = pwd;\r\n\t\tlet ret = await userApi.resetPassword(this.account, this.password, this.verify, this.type);\r\n\t\tif (ret.length === 0) {\r\n\t\t\tlet err = 'something wrong in reseting password';\r\n\t\t\tconsole.log(err);\r\n\t\t\tthrow err;\r\n\t\t}\r\n        nav.clear();\r\n        this.toSuccess();\r\n        return;\r\n    }\r\n}\r\n\r\n"],"sourceRoot":""}